config:
  # This is a test server run by team Artillery
  # It's designed to be highly scalable
  target: 'http://localhost:3000/api'
  phases:
    - duration: 60
      arrivalRate: 1
      rampTo: 5
      name: Warm up phase
    - duration: 60
      arrivalRate: 5
      rampTo: 10
      name: Ramp up load
    - duration: 30
      arrivalRate: 10
      rampTo: 30
      name: Spike phase
  # Load & configure a couple of useful plugins
  # https://docs.art/reference/extensions
  # plugins:
  #     ensure: {}
  #     apdex: {}
  #     metrics-by-endpoint: {}
  apdex:
    threshold: 100
  ensure:
      thresholds:
        - http.response_time.p99: 100
        - http.response_time.p95: 75

scenarios:
#시간이 많이 들기 때문에 flow 전체를 테스트하기 보다는 api 하나 씩 테스트 하는게 더 나음 
  - name: "1. [Users][signIn] - 100,000VUs"
    weight: 1
    flow:
      - loop:
        - post: 
            url: "/login"
        count: 1
        vus: 100000

  - name: "2-1. [Goods][findAll] - 100,000VUs"
    flow:
      - loop:
        - get:
            url: "/goods"
        count: 1
        vus: 100000

  - name: "2-2. [Goods][findOne] - 10,000VUs"
    flow:
      - loop:
        - get:
            url: "/goods/get-one/:id"
        count: 10
        vus: 10000

  - name: "3-1. [Carts][addToCart] - 10,000VUs"
    flow:
      - loop:
        - post:
            url: "/cart/add/:goodsId"
        count: 10
        vus: 10000

  - name: "3-2. [Carts][getCartItems] - 10,000VUs"
    flow:
      - loop:
        - get:
            url: "/cart"
        count: 1
        vus: 100000

  - name: "3-3. [Carts][updateQuantity] - 10,000VUs"
    flow:
      - loop:
        - patch:
            url: "update/{{:cartId}}"
        count: 1
        vus: 10000

  - name: "3-4. [Carts][removeFromCart] - 10,000VUs"
    flow:
      - loop:
        - delete:
            url: "/cart/remove/:cartId"
        count: 10
        vus: 10000

  - name: "3-5. [Carts][clearCart] - 10,000VUs"
    flow:
      - loop:
        - delete:
            url: "/cart/clear"
        count: 1
        vus: 10000

  - name: "4-1. [Orders][purchase(이름 바꿔야 함)] 100,000VUs"
    flow:
      - loop:
        - post:
            url: "/orders"
        count: 1
        vus: 100000

  - name: "4-2. [Orders][findAllOrderByUser] - 100,000VUs"
    flow:
      - loop:
        - get:
            url: "/orders/user"
        count: 1
        vus: 100000

  - name: "4-3. [Orders][findOneOrderByBoth(무슨 뜻이지 + ordersdetails가 전부 연동돼서 나오게 해야 함)] - 100,000VUs" 
    flow:
      - loop:
        - get:
            url: "/orders/:id"
        count: 1
        vus: 100000

  - name: "4-4. [Orders][cancelOrder] - 100,000VUs"
    flow:
      - loop:
        - delete:
            url: "/orders/:orderId/cancel"
        count: 1
        vus: 100000

  - name: "5-1. [Payments][pay] - 100,000VUs"
    flow:
      - loop:
        - post:
            url: "/payments"
        count: 1
        vus: 100000

  - name: "5-2. [Payments][findAllOrderByUser] - 100,000VUs"
    flow:
      - loop:
        - get:
            url: "/payments/{{:id}}"
        count: 1
        vus: 100000

  - name: "5-3. [Payments][findOneOrderByBoth(무슨 뜻이지)] - 100,000VUs"
    flow:
      - loop:
        - post:
            url: "/payments/:paymentId/cancel"
        count: 1
        vus: 100000

#     로그인     => 상품 전체조회(메인) => 상품 상세 조회   =>     장바구니 담기   =>    장바구니 조회       =>     상품 주문       =>       주문 전체내역 확인      =>        주문내역 상세조회       =>    결제      
#[Users][signIn] => [Goods][findAll] => [Goods][findOne] => [Carts][addToCart] => [Carts][getCartItems] => [Orders][purchase] => [Orders][findAllOrderByUser] => [Orders][findOneOrderByBoth] => [Payments][pay]