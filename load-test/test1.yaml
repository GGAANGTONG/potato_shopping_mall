config:
  # This is a test server run by team Artillery
  # It's designed to be highly scalable
  target: 'http://localhost:3000/api'
  phases:
    - duration: 60
      arrivalRate: 1
      rampTo: 5
      name: Warm up phase
    - duration: 60
      arrivalRate: 5
      rampTo: 10
      name: Ramp up load
    - duration: 30
      arrivalRate: 10
      rampTo: 30
      name: Spike phase
  # Load & configure a couple of useful plugins
  # https://docs.art/reference/extensions
  # plugins:
  #     ensure: {}
  #     apdex: {}
  #     metrics-by-endpoint: {}
  apdex:
    threshold: 100
  ensure:
      thresholds:
        - http.response_time.p99: 100
        - http.response_time.p95: 75
scenarios:
#시간이 많이 들기 때문에 flow 전체를 테스트하기 보다는 api 하나 씩 테스트 하는게 더 나음 
  - name: 1. (Users)10000VUs [SignIn]
    flow:
      - loop:
        - post: "/login"
        count: 1
        vus: 100000

  - name: 2-1. (Goods)10000VUs [findAll => 10 * findOne]
    flow:
      - loop:
        - get:
            url: "/goods"
        count: 1
        vus: 100000
        - get:
            url: "/goods/get-one/{{:id}}"
        count: 10
        vus: 10000

  - name: 2-2. (Goods & Carts)10000VUs [findAll => 10 * findOne => addToCart]
    flow:
      - loop:
        - get:
            url: "/goods"
        count: 1
        vus: 10000
        - get:
            url: "/goods/get-one/{{:id}}"
        count: 10
        vus: 10000
        - post:
            url: "/cart/add/{{:goodsId}}"
        count: 10
        vus: 10000

    - name: 3-1. (Carts)10000VUs [getCartItems => removeFromCart]
    flow:
      - loop:
        - get:
            url: "/cart"
        count: 1
        vus: 10000
        - delete:
            url: "/cart/remove/{{:cartId}}"
        count: 10
        vus: 10000

    - name: 3-2. (Carts)10000VUs [getCartItems => clearCart]
    flow:
      - loop:
        - get:
            url: "/cart"
        count: 1
        vus: 10000
        - delete:
            url: "/cart/clear"
        count: 1
        vus: 10000

    - name: 4-1. (Orders)10000VUs [getCartItems => purchase(이름 바꿔야 함)]
    flow:
      - loop:
        - get:
            url: "/cart"
        count: 1
        vus: 10000
        - post:
            url: "/orders"
        count: 10
        vus: 10000

    - name: 4-2. (Orders)10000VUs [getCartItems => findAllOrderByUser]
    flow:
      - loop:
        - get:
            url: "/cart"
        count: 1
        vus: 10000
        - get:
            url: "/orders/user"
        count: 1
        vus: 10000

    - name: 4-3. (Orders)10000VUs [getCartItems => findAllOrderByUser => findOneOrderByBoth(무슨 뜻이지 + ordersdetails가 전부 연동돼서 나오게 해야 함) => cancelOrder]
    flow:
      - loop:
        - get:
            url: "/cart"
        count: 1
        vus: 10000
        - get:
            url: "/orders/user"
        count: 1
        vus: 10000
        - get:
            url: "/orders/{{:id}}"
        count: 10
        vus: 10000
        - get:
            url: "/orders/{{:orderId}}/cancel"
        count: 10
        vus: 10000

    - name: 5-1. (Payments)10000VUs [getCartItems => findAllOrderByUser => findOneOrderByBoth(무슨 뜻이지) => pay]
    flow:
      - loop:
        - get:
            url: "/cart"
        count: 1
        vus: 10000
        - get:
            url: "/orders/user"
        count: 1
        vus: 10000
        - get:
            url: "/orders/{{:id}}"
        count: 10
        vus: 10000
        - post:
            url: "/payments"
        count: 10
        vus: 10000

    - name: 5-2. (Payments)10000VUs []
    flow:
      - loop:
        - get:
            url: "/cart"
        count: 1
        vus: 10000
        - get:
            url: "/orders/user"
        count: 1
        vus: 10000
        - get:
            url: "/orders/{{:id}}"
        count: 10
        vus: 10000
        - post:
            url: "/payments"
        count: 10
        vus: 10000